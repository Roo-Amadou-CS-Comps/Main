<?php
session_start();   

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '/var/www/html/evenmoreimportant/vendor/autoload.php';
use WhiteHat101\Crypt\APR1_MD5;

$filename = '/var/www/html/evenmoreimportant/data/hashes.txt';

//FOLLOWING CODE GENERATED BY GOOGLE

// Include Google Cloud dependencies using Composer
use Google\Cloud\RecaptchaEnterprise\V1\RecaptchaEnterpriseServiceClient;
use Google\Cloud\RecaptchaEnterprise\V1\Event;
use Google\Cloud\RecaptchaEnterprise\V1\Assessment;
use Google\Cloud\RecaptchaEnterprise\V1\TokenProperties\InvalidReason;

/**
  * Create an assessment to analyze the risk of a UI action.
  * @param string $recaptchaKey The reCAPTCHA key associated with the site/app
  * @param string $token The generated token obtained from the client.
  * @param string $project Your Google Cloud Project ID.
  * @param string $action Action name corresponding to the token.
  */
  function create_assessment(
    string $recaptchaKey,
    string $token,
    string $project,
    string $action
): bool {
    $client = new RecaptchaEnterpriseServiceClient();
    $projectName = $client->projectName($project);

    $event = (new Event())
        ->setSiteKey($recaptchaKey)
        ->setToken($token);

    $assessment = (new Assessment())
        ->setEvent($event);

    try {
        $response = $client->createAssessment($projectName, $assessment);

        if ($response->getTokenProperties()->getValid() == false) {
            printf('The CreateAssessment() call failed because the token was invalid for the following reason: ');
            printf(InvalidReason::name($response->getTokenProperties()->getInvalidReason()));
            return false;
        }

        if ($response->getTokenProperties()->getAction() == $action) {
            $score = $response->getRiskAnalysis()->getScore();
            printf('The score for the protection action is: ' . $score);

            // Check if the score is acceptable (e.g., > 0.5)
            return $score > 0.5;
        } else {
            printf('The action attribute in your reCAPTCHA tag does not match the action you are expecting to score');
            return false;
        }
    } catch (Exception $e) {
        printf('CreateAssessment() call failed with the following error: ' . $e->getMessage());
        return false;
    }
}
//END OF CODE GENERATED BY GOOGLE


function add_log($username) {
    $logTitle = $username . "_log";
    $logSerialized = $_SESSION[$logTitle] ?? null; 

    if ($logSerialized === null) { 
        $logUnserialized = array();
    } else {
        $logUnserialized = unserialize($logSerialized);
    }

    array_push($logUnserialized, time());
    $_SESSION[$logTitle] = serialize($logUnserialized);
    apache_setenv($logTitle, serialize($logUnserialized));
}

function check_login_logs($username) {
    $logTitle = $username . "_log";
    $logSerialized = $_SESSION[$logTitle] ?? null; 

    if ($logSerialized === null) { 
        return true;
    } 

    $logUnserialized = unserialize($logSerialized);
    $currentTime = time();
    foreach ($logUnserialized as $key => $timestamp) {
        if ($currentTime - $timestamp >= 600) {
            unset($logUnserialized[$key]);
        }
    }

    $logUnserialized = array_values($logUnserialized);
    $_SESSION[$logTitle] = serialize($logUnserialized);

    if (count($logUnserialized) >= 10) {
        return false;
    }
    return true;
}

function validate_user($username, $password, $filename) {
    $fp = fopen($filename, 'r');
    if (!$fp) {
        die('Password file not found.');
    }

    if (!check_login_logs($username)) {
        fclose($fp);
        echo "Too many login attempts. Please try again later.<br>";
        return false;
    }

    while (($line = fgets($fp)) !== false) {
        list($storedUser, $hashedPassword) = explode(':', trim($line), 2);

        if ($storedUser === $username) {                
            if (APR1_MD5::check($password, $hashedPassword)) {
                add_log($username);
                fclose($fp);
                echo "Password matched.<br>";
                return true;
            } else {
                add_log($username);
                echo "Password did not match.<br>";
                fclose($fp);
                return false;
            }
        }
    }

    echo "Username not found.<br>";
    fclose($fp);
    return false;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $recaptchaToken = $_POST['recaptcha_token'];

    if (create_assessment(
        '6Le6EHUqAAAAADIDxIKclhwU7b-6TjyBcgLkGfMS',
        $recaptchaToken,
        'comps-1730772769834',
        'login'
    )) {
        $username = $_POST['username'];
        $password = $_POST['password'];

        if (validate_user($username, $password, $filename)) {
            $_SESSION['loggedin'] = true;
            $_SESSION['username'] = $username;
            header('Location: data/secret.php');
            exit();
        } else {
            $error_message = "Invalid username or password!";
        }
    } else {
        $error_message = "reCAPTCHA verification failed. Please try again.";
    }
}

?>
<!DOCTYPE html>
<html>
<head>
    <script src="https://www.google.com/recaptcha/enterprise.js?render=6Le6EHUqAAAAADIDxIKclhwU7b-6TjyBcgLkGfMS"></script>
    <script>
    function onClick(e) {
        e.preventDefault();
        grecaptcha.enterprise.ready(async () => {
            const token = await grecaptcha.enterprise.execute('6Le6EHUqAAAAADIDxIKclhwU7b-6TjyBcgLkGfMS', { action: 'LOGIN' });
            document.getElementById('recaptcha_token').value = token;
            e.target.closest('form').submit();
        });
    }
    </script>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <?php if (isset($error_message)) { echo "<p style='color:red;'>$error_message</p>"; } ?>
    <form method="post" action="login.php">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br>
        <input type="hidden" name="recaptcha_token" id="recaptcha_token">
        <button type="submit" onclick="onClick(event)">Login</button>
    </form>
</body>
</html>
