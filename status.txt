======== ROO ========

- I have a website set up! It's just HTML and PHP, no CSS or anything fancy. The background is Apache2 and Nginx. 
- There are two methods for getting in - one that uses basicauth built in to the browser, and one that uses a PHP script. 
- There's some DOS protection, that is built in and enabled in Apache. I've done the config for that. 

- My next big thing is containerizing it and then adding in login-attempt logging. After that, we're getting into benchmarking and improving the spraying tool
- I like to think at least with the website, we're getting closer to minimum viable product. 

________________

======== AMADOU ========
- We have a password sprayer up, and I believe it has reached the "minimal viable product" status.
- All implementations are explained in the README.md under "tool"
    -- Some things not yet in the README:
        1. There's functionality to apply common character substitutions (e.g., 'a' to '4'), generate variants, and perform bruteforce attacks.
        2. Some error handling: It uses `RequestException` handling to account for connection issues, timeouts, and login failures.
    3. After exhausting all combinations, it asks the user whether to proceed with bruteforce.

- Some next steps:
    1. Test the tool a little more, and compare its performance to hydra
    2. Optimize the sleep timing between requests and find a sweet spot, somehow. Still need to research more into it.
    3. Implement one or more of the libraries we're utilizing.
    4. Some extra features:
        a. Implement optional logging of all successful and failed login attempts to a file.
        b. Some way to automatically stop attacked when lockout warnings are detected to avoid triggering some security protocol on the website.